var app = require("../app");
var debug = require("debug")("rest-api-nodejs-mongodb:server");
var mongoose = require("mongoose");
var http = require("http");
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
var server = http.createServer(app);

// connect();

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
console.log(`Server is running on port ${port}`);

function connect() {
  mongoose.connection
    .on("error", console.log)
    .on("disconnected", connect)
    .once("open", function () {
      console.log("DB Connected.");
    });
  return mongoose.connect(
    `mongodb+srv://admin:admin@resortdb.uealg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority`,
    {
      keepAlive: 1,
      useNewUrlParser: true,
      useUnifiedTopology: true,
    }
  );
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
